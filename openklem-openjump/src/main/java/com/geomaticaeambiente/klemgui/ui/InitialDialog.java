package com.geomaticaeambiente.klemgui.ui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;

import com.geomaticaeambiente.klemgui.plugin.hydrology.hydrographs.klem.VetoableSingleSelectionModel;
import com.geomaticaeambiente.klemgui.utils.AbstractInputKlemPlugin;
import com.geomaticaeambiente.klemgui.utils.PluginGUIComponentsInterface;
import com.geomaticaeambiente.klemgui.utils.PluginUtils;
import com.vividsolutions.jump.util.StringUtil;
import com.vividsolutions.jump.workbench.plugin.PlugInContext;
import com.vividsolutions.jump.workbench.ui.ErrorDialog;

/**
 * Initial panel that contains all extension's tools. The tools are listed in a
 * JTree. When it is selected a leaf node on the JTree the Input panel is
 * updated.
 * 
 * @author geomatica
 */
public class InitialDialog extends JDialog {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    /**
     * Creates new form PannelloIniziale
     * 
     * @param parent
     * @param modal
     * @param context
     * @param layerablesList
     */
    public InitialDialog(Frame parent, boolean modal, PlugInContext context,
            LayerablesList layerablesList) {
        super(parent, modal);

        this.context = context;
        this.layerablesList = layerablesList;
        setUndecorated(true);
        initComponents();
        fixComponents();
    }

    public InitialDialog(Frame parent, boolean modal,
            LayerablesList layerablesList) {
        super(parent, modal);

        this.layerablesList = layerablesList;
        setUndecorated(true);
     
        
        initComponents();
        fixComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        jSplitPane1 = new JSplitPane();
        jPanel1 = new JPanel();
        jScrollPane1 = new JScrollPane();
        jTree1 = new JTree();
        jPanel2 = new JPanel();
        jTabbedPane2 = new JTabbedPane();
        jPanel3 = new JPanel();
        jPanel4 = new JPanel();
        jButton_Close = new JButton();
        jButton_About = new JButton();

        setModalityType(ModalityType.DOCUMENT_MODAL);

        setPreferredSize(new Dimension(780, 600));
        getContentPane().setLayout(new GridBagLayout());

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setContinuousLayout(true);
        jSplitPane1.setOneTouchExpandable(true);
        jSplitPane1.setDividerSize(9);
        jSplitPane1.setResizeWeight(0.2);
        jSplitPane1.setPreferredSize(new Dimension(300, 324));

        jPanel1.setLayout(new BorderLayout());

        final DefaultMutableTreeNode treeNode1 = new DefaultMutableTreeNode(
                "root");
        jTree1.setModel(new DefaultTreeModel(treeNode1));
        jTree1.setMaximumSize(new Dimension(200, 64));
        jTree1.setMinimumSize(new Dimension(200, 64));
        jTree1.setPreferredSize(new Dimension(200, 64));
        jScrollPane1.setViewportView(jTree1);

        jPanel1.add(jScrollPane1, BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setLayout(new GridBagLayout());

        jTabbedPane2.setPreferredSize(new Dimension(450, 44));

        jPanel3.setLayout(new GridBagLayout());
        final java.util.ResourceBundle bundle = java.util.ResourceBundle
                .getBundle("com/geomaticaeambiente/klemgui/resources/Bundle"); // NOI18N
        jTabbedPane2.addTab(bundle
                .getString("InitialDialog.jPanel3.TabConstraints.tabTitle_1"),
                jPanel3); // NOI18N

        jPanel4.setLayout(new GridBagLayout());
        jTabbedPane2.addTab(bundle
                .getString("InitialDialog.jPanel4.TabConstraints.tabTitle_1"),
                jPanel4); // NOI18N

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jTabbedPane2, gridBagConstraints);

        jSplitPane1.setRightComponent(jPanel2);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jSplitPane1, gridBagConstraints);

        jButton_Close.setText(bundle
                .getString("InitialDialog.jButton_Close.text")); // NOI18N
        jButton_Close.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                jButton_CloseActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(6, 10, 6, 6);
        getContentPane().add(jButton_Close, gridBagConstraints);

        jButton_About.setText(bundle
                .getString("InitialDialog.jButton_About.text")); // NOI18N
        jButton_About.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                jButton_AboutActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.insets = new Insets(6, 10, 6, 10);
        getContentPane().add(jButton_About, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_CloseActionPerformed(ActionEvent evt) {// GEN-FIRST:event_jButton_CloseActionPerformed

        dispose();

    }// GEN-LAST:event_jButton_CloseActionPerformed

    private void jButton_AboutActionPerformed(ActionEvent evt) {// GEN-FIRST:event_jButton_AboutActionPerformed

        final AboutDialog aboutDialog = new AboutDialog();
        aboutDialog.setLocationRelativeTo(this);
        aboutDialog.setVisible(true);

    }// GEN-LAST:event_jButton_AboutActionPerformed

    // /**
    // * @param args the command line arguments
    // */
    // public static void main(String args[]) {
    // InitialDialog sp = new InitialDialog(null, true, rasterLayersList);
    //
    // sp.setVisible(true);
    //
    // }

    private void fixComponents() {

        setTitle(PluginUtils.plugInName);

        final VetoableSingleSelectionModel model = new VetoableSingleSelectionModel();
        jTabbedPane2.setModel(model);

        jTree1.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent tse) {

                final DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1
                        .getLastSelectedPathComponent();

                if (node == null) {
                    return;
                }

                final Object nodeInfo = node.getUserObject();
                // PluginGUIComponentsInterface book = null;
                if (node.isLeaf()) {

                    book = (AbstractInputKlemPlugin) nodeInfo;

                    JScrollPane panel1 = null;
                    final JScrollPane panel2 = null;

                    try {
                        panel1 = book.getTabPluginComponents();
                    } catch (final Exception ex) {
                        ErrorDialog.show(panel1, PluginUtils.plugInName,
                                ex.toString(), StringUtil.stackTrace(ex));
                    }

                    if (!node.toString().equals("Kinematic Local Excess Model")) { // NOI18N

                        jTabbedPane2.removeAll();
                        jTabbedPane2.add(panel1, "Input"); // NOI18N
                        jTabbedPane2.add(panel2, "Output"); // NOI18N
                        jTabbedPane2.setEnabledAt(1, false);
                    } else {
                        jTabbedPane2.removeAll();
                        jTabbedPane2.add(panel1, "Input"); // NOI18N
                        jTabbedPane2.add(
                                new JScrollPane(),
                                PluginUtils.getResources().getString(
                                        "HydrographKlemPlugin.Params.label"));
                        jTabbedPane2
                                .add(new JScrollPane(),
                                        PluginUtils
                                                .getResources()
                                                .getString(
                                                        "HydrographKlemPlugin.AdvancedParams.label"));
                        jTabbedPane2.add(new JScrollPane(), "Output"); // NOI18N
                        jTabbedPane2.add(new JScrollPane(), "Output2");
                        jTabbedPane2.setEnabledAt(1, false);
                        jTabbedPane2.setEnabledAt(2, false);
                        jTabbedPane2.setEnabledAt(3, false);
                        jTabbedPane2.setEnabledAt(4, false);
                    }

                }
            }
        });
        final PersonalTreeNode ptn = new PersonalTreeNode(context, this,
                layerablesList);
        jTree1.setModel(new DefaultTreeModel(ptn.getTreeNodes()));

        final DefaultTreeCellRenderer defTreeCellRenderer = new PlugInTreeCellRenderer();
        jTree1.setCellRenderer(defTreeCellRenderer);

    }

    public JTabbedPane getTabbedPane() {
        return jTabbedPane2;
    }

    // public PluginGUIComponentsInterface getOut(){
    // return book;
    // }

    // public JScrollPane getPanelOutput(){
    // JScrollPane pane2 = (JScrollPane) jTabbedPane2.getComponentAt(1);
    // return pane2;
    // }
    //

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButton_About;
    private JButton jButton_Close;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JScrollPane jScrollPane1;
    private JSplitPane jSplitPane1;
    private JTabbedPane jTabbedPane2;
    private JTree jTree1;
    // End of variables declaration//GEN-END:variables

    private PlugInContext context;
    private final boolean output = false;
    private PluginGUIComponentsInterface book;
    private final int tabs = 0;
    private final LayerablesList layerablesList;

    class PlugInTreeCellRenderer extends DefaultTreeCellRenderer {
        // private JLabel label;

        /**
         * 
         */
        private static final long serialVersionUID = 1L;

        PlugInTreeCellRenderer() {
            // label = new JLabel();
        }

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value,
                boolean selected, boolean expanded, boolean leaf, int row,
                boolean hasFocus) {

            final DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
            final Object o = node.getUserObject();

            final JComponent c = (JComponent) super
                    .getTreeCellRendererComponent(tree, value, selected,
                            expanded, leaf, row, hasFocus);

            final JLabel label = (JLabel) c;
            if (!(o instanceof String)) {
                label.setIcon(null);
                label.setText(o.toString());
            } else {
                if (value.toString().equals(
                        PluginUtils.getResources().getString(
                                "KlemGUI.TreeSettingTools.label"))) { // NOI18N
                    label.setIcon(new ImageIcon(
                            getClass()
                                    .getResource(
                                        "/com/geomaticaeambiente/klemgui/images/wrench_orange.png")));
                } else if (value.toString().equals(
                        PluginUtils.getResources().getString(
                                "KlemGUI.TreeRasterTools.label"))) {
                    label.setIcon(new ImageIcon(
                            getClass()
                                    .getResource(
                                        "/com/geomaticaeambiente/klemgui/images/Raster_01.png")));
                } else if (value.toString().equals(
                        PluginUtils.getResources().getString(
                                "KlemGUI.HydrologyTools.label"))
                        || value.toString().equals(
                                PluginUtils.getResources().getString(
                                        "KlemGUI.TreeGeomorphometry.label"))) {
                    label.setIcon(new ImageIcon(getClass().getResource(
                        "/com/geomaticaeambiente/klemgui/images/cog.png")));
                } else if (value.toString().equals(
                        PluginUtils.getResources().getString(
                                "KlemGUI.TreeHydrographName.label"))) {
                    label.setIcon(new ImageIcon(
                            getClass()
                                    .getResource(
                                        "/com/geomaticaeambiente/klemgui/images/hydrograph.png")));
                } else {
                    label.setIcon(PluginUtils.getFolderIcon());
                }
                label.setText("" + value);
                // //System.out.println(value);
            }
            return c;

        }

    }

}
